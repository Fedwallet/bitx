// Code generated by protoc-gen-go.
// source: src/bitx/streamer/streamerpb/streamer.proto
// DO NOT EDIT!

/*
Package streamerpb is a generated protocol buffer package.

It is generated from these files:
	src/bitx/streamer/streamerpb/streamer.proto

It has these top-level messages:
	TradeUpdate
	CreateUpdate
	DeleteUpdate
	Update
	Order
	OrderBook
	StreamUpdatesRequest
	GetOrderBookRequest
*/
package streamerpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Order_Type int32

const (
	Order_UNKNOWN Order_Type = 0
	Order_BID     Order_Type = 1
	Order_ASK     Order_Type = 2
)

var Order_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "BID",
	2: "ASK",
}
var Order_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"BID":     1,
	"ASK":     2,
}

func (x Order_Type) String() string {
	return proto.EnumName(Order_Type_name, int32(x))
}

type TradeUpdate struct {
	BaseE8    int64 `protobuf:"varint,1,opt,name=base_e8" json:"base_e8,omitempty"`
	CounterE8 int64 `protobuf:"varint,2,opt,name=counter_e8" json:"counter_e8,omitempty"`
	OrderId   int64 `protobuf:"varint,3,opt,name=order_id" json:"order_id,omitempty"`
}

func (m *TradeUpdate) Reset()         { *m = TradeUpdate{} }
func (m *TradeUpdate) String() string { return proto.CompactTextString(m) }
func (*TradeUpdate) ProtoMessage()    {}

type CreateUpdate struct {
	Order *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
}

func (m *CreateUpdate) Reset()         { *m = CreateUpdate{} }
func (m *CreateUpdate) String() string { return proto.CompactTextString(m) }
func (*CreateUpdate) ProtoMessage()    {}

func (m *CreateUpdate) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type DeleteUpdate struct {
	OrderId int64 `protobuf:"varint,1,opt,name=order_id" json:"order_id,omitempty"`
}

func (m *DeleteUpdate) Reset()         { *m = DeleteUpdate{} }
func (m *DeleteUpdate) String() string { return proto.CompactTextString(m) }
func (*DeleteUpdate) ProtoMessage()    {}

type Update struct {
	Sequence     int64          `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	TradeUpdate  []*TradeUpdate `protobuf:"bytes,2,rep,name=trade_update" json:"trade_update,omitempty"`
	CreateUpdate *CreateUpdate  `protobuf:"bytes,3,opt,name=create_update" json:"create_update,omitempty"`
	DeleteUpdate *DeleteUpdate  `protobuf:"bytes,4,opt,name=delete_update" json:"delete_update,omitempty"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}

func (m *Update) GetTradeUpdate() []*TradeUpdate {
	if m != nil {
		return m.TradeUpdate
	}
	return nil
}

func (m *Update) GetCreateUpdate() *CreateUpdate {
	if m != nil {
		return m.CreateUpdate
	}
	return nil
}

func (m *Update) GetDeleteUpdate() *DeleteUpdate {
	if m != nil {
		return m.DeleteUpdate
	}
	return nil
}

type Order struct {
	Type     Order_Type `protobuf:"varint,1,opt,name=type,enum=streamerpb.Order_Type" json:"type,omitempty"`
	OrderId  int64      `protobuf:"varint,2,opt,name=order_id" json:"order_id,omitempty"`
	PriceE8  int64      `protobuf:"varint,3,opt,name=price_e8" json:"price_e8,omitempty"`
	VolumeE8 int64      `protobuf:"varint,4,opt,name=volume_e8" json:"volume_e8,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}

type OrderBook struct {
	Sequence int64    `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Bids     []*Order `protobuf:"bytes,2,rep,name=bids" json:"bids,omitempty"`
	Asks     []*Order `protobuf:"bytes,3,rep,name=asks" json:"asks,omitempty"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}

func (m *OrderBook) GetBids() []*Order {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *OrderBook) GetAsks() []*Order {
	if m != nil {
		return m.Asks
	}
	return nil
}

type StreamUpdatesRequest struct {
	Pair string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
}

func (m *StreamUpdatesRequest) Reset()         { *m = StreamUpdatesRequest{} }
func (m *StreamUpdatesRequest) String() string { return proto.CompactTextString(m) }
func (*StreamUpdatesRequest) ProtoMessage()    {}

type GetOrderBookRequest struct {
	Pair string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
}

func (m *GetOrderBookRequest) Reset()         { *m = GetOrderBookRequest{} }
func (m *GetOrderBookRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderBookRequest) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("streamerpb.Order_Type", Order_Type_name, Order_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Streamer service

type StreamerClient interface {
	StreamUpdates(ctx context.Context, in *StreamUpdatesRequest, opts ...grpc.CallOption) (Streamer_StreamUpdatesClient, error)
	GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*OrderBook, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) StreamUpdates(ctx context.Context, in *StreamUpdatesRequest, opts ...grpc.CallOption) (Streamer_StreamUpdatesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Streamer_serviceDesc.Streams[0], c.cc, "/streamerpb.Streamer/StreamUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerStreamUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_StreamUpdatesClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type streamerStreamUpdatesClient struct {
	grpc.ClientStream
}

func (x *streamerStreamUpdatesClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamerClient) GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*OrderBook, error) {
	out := new(OrderBook)
	err := grpc.Invoke(ctx, "/streamerpb.Streamer/GetOrderBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Streamer service

type StreamerServer interface {
	StreamUpdates(*StreamUpdatesRequest, Streamer_StreamUpdatesServer) error
	GetOrderBook(context.Context, *GetOrderBookRequest) (*OrderBook, error)
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).StreamUpdates(m, &streamerStreamUpdatesServer{stream})
}

type Streamer_StreamUpdatesServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type streamerStreamUpdatesServer struct {
	grpc.ServerStream
}

func (x *streamerStreamUpdatesServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Streamer_GetOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StreamerServer).GetOrderBook(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamerpb.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderBook",
			Handler:    _Streamer_GetOrderBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _Streamer_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
}
